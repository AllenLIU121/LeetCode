# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
       # BFS
       res = []
        q = deque([root])
        while q:
            rightSide = None
            for i in range(len(q)):
                node = q.popleft()
                if node:
                    rightSide = node
                    q.append(node.left)
                    q.append(node.right)
            if rightSide:
                res.append(rightSide.val)
        return res

        # DFS
        nodes = {}
        def dfs(node, level):
            if not node:
                return
            nodes[level] = node.val
            dfs(node.left, level+1)
            dfs(node.right, level+1)
        dfs(root, 1)
            
        return [v for k,v in nodes.items()]
