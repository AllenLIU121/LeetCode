# Floyd's algorithm    1) slow, fast pointer: until they are intersected
                       2) slow2 start from head: len(slow2 -> cycle start) == len(slow -> cycle start) 

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow, fast = 0, 0
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break
        
        slow2 = 0
        while True:
            slow = nums[slow]
            slow2 = nums[slowd2]
            if slow == slow2:
                return slow
